# main.py
import os
import uvicorn
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from sentence_transformers import SentenceTransformer
import chromadb
from dotenv import load_dotenv

load_dotenv()

# T·∫£i c·∫•u h√¨nh t·ª´ file .env
CHROMA_PATH = os.getenv("CHROMA_PATH", "./chroma_db")
MODEL_NAME = "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
PRODUCT_COLLECTION_NAME = "product_vectors"

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng FastAPI
app = FastAPI(
    title="D·ªãch v·ª• AI T√¨m ki·∫øm S·∫£n ph·∫©m",
    description="API cho ph√©p t√¨m ki·∫øm ng·ªØ nghƒ©a tr√™n b·ªô s∆∞u t·∫≠p s·∫£n ph·∫©m s√°ch.",
    version="1.0.0",
)

# --- T·∫£i m√¥ h√¨nh v√† k·∫øt n·ªëi DB khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng ---
# Vi·ªác n√†y gi√∫p m√¥ h√¨nh v√† k·∫øt n·ªëi s·∫µn s√†ng, kh√¥ng c·∫ßn t·∫£i l·∫°i m·ªói khi c√≥ request
try:
    print(f"ƒêang t·∫£i m√¥ h√¨nh embedding: '{MODEL_NAME}'...")
    # T·∫£i m√¥ h√¨nh embedding v√†o b·ªô nh·ªõ.
    model = SentenceTransformer(MODEL_NAME)
    print("‚úÖ T·∫£i m√¥ h√¨nh th√†nh c√¥ng.")
except Exception as e:
    print(f"‚ùå L·ªói nghi√™m tr·ªçng: Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh embedding. {e}")
    model = None

try:
    print(f"ƒêang k·∫øt n·ªëi t·ªõi ChromaDB t·∫°i: {CHROMA_PATH}")
    chroma_client = chromadb.PersistentClient(path=CHROMA_PATH)
    # K·∫øt n·ªëi t·ªõi collection s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c t·∫°o b·ªüi script vector h√≥a
    products_chroma_collection = chroma_client.get_collection(
        name=PRODUCT_COLLECTION_NAME
    )
    print(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng t·ªõi collection '{PRODUCT_COLLECTION_NAME}'.")
except Exception as e:
    print(f"‚ùå L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi collection '{PRODUCT_COLLECTION_NAME}'.")
    print("üëâ Vui l√≤ng ch·∫Øc ch·∫Øn r·∫±ng b·∫°n ƒë√£ ch·∫°y script vector h√≥a d·ªØ li·ªáu tr∆∞·ªõc.")
    products_chroma_collection = None


# Model cho request body, tu√¢n th·ªß y√™u c·∫ßu c·ªßa task
class SearchQuery(BaseModel):
    query: str = Field(
        ..., description="Chu·ªói vƒÉn b·∫£n c·∫ßn t√¨m ki·∫øm.", example="s√°ch v·ªÅ kinh t·∫ø vƒ© m√¥"
    )
    top_k: int = Field(20, gt=0, le=100, description="S·ªë l∆∞·ª£ng k·∫øt qu·∫£ tr·∫£ v·ªÅ.")


# Model cho response body
class SearchResponse(BaseModel):
    product_ids: list[str]


# T·∫°o API endpoint POST /ai/search.
@app.post(
    "/ai/search",
    response_model=SearchResponse,
    summary="T√¨m ki·∫øm s·∫£n ph·∫©m theo ng·ªØ nghƒ©a",
)
async def search_products(search_request: SearchQuery):
    """
    Endpoint n√†y nh·∫≠n m·ªôt chu·ªói t√¨m ki·∫øm v√† tr·∫£ v·ªÅ danh s√°ch c√°c ID s·∫£n ph·∫©m
    c√≥ n·ªôi dung t∆∞∆°ng ƒë·ªìng nh·∫•t v·ªÅ m·∫∑t ng·ªØ nghƒ©a.
    """
    if not model or not products_chroma_collection:
        raise HTTPException(
            status_code=503,
            detail="D·ªãch v·ª• ch∆∞a s·∫µn s√†ng. Vui l√≤ng ki·ªÉm tra log ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.",
        )

    try:
        # Nh·∫≠n chu·ªói t√¨m ki·∫øm (query) t·ª´ request body (ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi FastAPI)

        # S·ª≠ d·ª•ng m√¥ h√¨nh ƒë·ªÉ vector h√≥a chu·ªói query c·ªßa ng∆∞·ªùi d√πng.
        print(f"ƒêang vector h√≥a query: '{search_request.query}'")
        query_embedding = model.encode(search_request.query).tolist()

        # S·ª≠ d·ª•ng vector truy v·∫•n ƒë·ªÉ truy v·∫•n v√†o collection s√°ch trong ChromaDB
        # v√† l·∫•y ra top k ID c·ªßa c√°c cu·ªën s√°ch c√≥ vector t∆∞∆°ng ƒë·ªìng nh·∫•t.
        print(f"ƒêang truy v·∫•n ChromaDB ƒë·ªÉ l·∫•y top {search_request.top_k} k·∫øt qu·∫£...")
        results = products_chroma_collection.query(
            query_embeddings=[query_embedding], n_results=search_request.top_k
        )

        # Tr·∫£ v·ªÅ m·ªôt m·∫£ng JSON ch·ª©a danh s√°ch c√°c ID s√°ch n√†y.
        # ID ƒë∆∞·ª£c l·∫•y t·ª´ k·∫øt qu·∫£ truy v·∫•n, ch√∫ng ch√≠nh l√† c√°c _id t·ª´ MongoDB.
        product_ids = results.get("ids", [[]])[0]
        print(f"‚úÖ T√¨m th·∫•y {len(product_ids)} k·∫øt qu·∫£.")

        return {"product_ids": product_ids}

    except Exception as e:
        print(f"‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh t√¨m ki·∫øm: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói m√°y ch·ªß n·ªôi b·ªô: {e}")


@app.get("/", summary="Ki·ªÉm tra tr·∫°ng th√°i d·ªãch v·ª•")
def read_root():
    return {"status": "D·ªãch v·ª• AI t√¨m ki·∫øm ng·ªØ nghƒ©a ƒëang ho·∫°t ƒë·ªông."}


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
