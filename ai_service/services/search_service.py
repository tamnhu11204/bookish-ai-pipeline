import os
from typing import List
import chromadb
from sentence_transformers import SentenceTransformer
from dotenv import load_dotenv

load_dotenv()

# C·∫•u h√¨nh t·ª´ file .env
CHROMA_PATH = os.getenv("CHROMA_PATH", "./chroma_db")
MODEL_NAME = "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
PRODUCT_COLLECTION_NAME = "product_vectors"


# L·ªõp ngo·∫°i l·ªá t√πy ch·ªânh
class SearchServiceError(Exception):
    """L·ªõp ngo·∫°i l·ªá t√πy ch·ªânh cho c√°c l·ªói trong SearchService."""

    def __init__(self, message: str, status_code: int = 500):
        self.message = message
        self.status_code = status_code
        super().__init__(self.message)


# Kh·ªüi t·∫°o m√¥ h√¨nh v√† k·∫øt n·ªëi ChromaDB
try:
    print(f"üîπ ƒêang t·∫£i m√¥ h√¨nh embedding: {MODEL_NAME}")
    model = SentenceTransformer(MODEL_NAME)
    print(f"üîπ ƒêang k·∫øt n·ªëi t·ªõi ChromaDB t·∫°i: {CHROMA_PATH}")
    chroma_client = chromadb.PersistentClient(path=CHROMA_PATH)
    collection = chroma_client.get_collection(PRODUCT_COLLECTION_NAME)
    print(
        f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng t·ªõi collection '{PRODUCT_COLLECTION_NAME}' & m√¥ h√¨nh ƒë√£ t·∫£i."
    )
except Exception as e:
    print(f"‚ùå L·ªói nghi√™m tr·ªçng: Kh√¥ng th·ªÉ kh·ªüi t·∫°o d·ªãch v·ª• t√¨m ki·∫øm: {e}")
    model = None
    collection = None


def semantic_search(query: str, top_k: int = 20) -> List[str]:
    """
    H√†m th·ª±c hi·ªán t√¨m ki·∫øm ng·ªØ nghƒ©a trong ChromaDB.

    Args:
        query (str): Chu·ªói truy v·∫•n t√¨m ki·∫øm.
        top_k (int): S·ªë l∆∞·ª£ng k·∫øt qu·∫£ tr·∫£ v·ªÅ (m·∫∑c ƒë·ªãnh: 20, gi·ªõi h·∫°n: 1-100).

    Returns:
        List[str]: Danh s√°ch c√°c ID s·∫£n ph·∫©m t∆∞∆°ng ƒë·ªìng.

    Raises:
        SearchServiceError: N·∫øu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c c√≥ l·ªói trong qu√° tr√¨nh t√¨m ki·∫øm.
    """
    # Ki·ªÉm tra tr·∫°ng th√°i m√¥ h√¨nh v√† collection
    if not model or not collection:
        raise SearchServiceError(
            "D·ªãch v·ª• ch∆∞a s·∫µn s√†ng. Vui l√≤ng ki·ªÉm tra log ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.",
            status_code=503,
        )

    # X√°c th·ª±c ƒë·∫ßu v√†o
    if not query or not isinstance(query, str) or query.strip() == "":
        raise SearchServiceError("Chu·ªói truy v·∫•n kh√¥ng ƒë∆∞·ª£c r·ªóng.", status_code=400)

    if not isinstance(top_k, int):
        raise SearchServiceError("top_k ph·∫£i l√† m·ªôt s·ªë nguy√™n.", status_code=400)

    if top_k < 1 or top_k > 100:
        raise SearchServiceError(
            "top_k ph·∫£i n·∫±m trong kho·∫£ng t·ª´ 1 ƒë·∫øn 100.", status_code=400
        )

    try:
        # Vector h√≥a chu·ªói truy v·∫•n
        print(f"üîπ ƒêang vector h√≥a query: '{query}'")
        query_emb = model.encode(query).tolist()

        # Truy v·∫•n ChromaDB
        print(f"üîπ ƒêang truy v·∫•n ChromaDB ƒë·ªÉ l·∫•y top {top_k} k·∫øt qu·∫£...")
        results = collection.query(query_embeddings=[query_emb], n_results=top_k)
        ids = results.get("ids", [[]])[0]
        print(f"‚úÖ T√¨m th·∫•y {len(ids)} k·∫øt qu·∫£.")

        return ids

    except Exception as e:
        print(f"‚ùå L·ªói trong semantic_search: {e}")
        raise SearchServiceError(f"L·ªói trong qu√° tr√¨nh t√¨m ki·∫øm: {e}", status_code=500)
